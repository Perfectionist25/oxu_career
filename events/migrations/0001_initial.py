# Generated by Django 5.2.7 on 2025-10-28 12:04

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Category Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('color', models.CharField(default='#007cba', max_length=7, verbose_name='Color')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icon')),
            ],
            options={
                'verbose_name': 'Event Category',
                'verbose_name_plural': 'Event Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Event Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('short_description', models.TextField(max_length=300, verbose_name='Short Description')),
                ('event_type', models.CharField(choices=[('conference', 'Conference'), ('workshop', 'Workshop'), ('seminar', 'Seminar'), ('networking', 'Networking'), ('career_fair', 'Career Fair'), ('hackathon', 'Hackathon'), ('webinar', 'Webinar'), ('social', 'Social Event'), ('training', 'Training'), ('other', 'Other')], max_length=20, verbose_name='Event Type')),
                ('start_date', models.DateTimeField(verbose_name='Start Date')),
                ('end_date', models.DateTimeField(verbose_name='End Date')),
                ('location', models.CharField(max_length=200, verbose_name='Location')),
                ('venue', models.CharField(blank=True, max_length=200, verbose_name='Venue')),
                ('online_event', models.BooleanField(default=False, verbose_name='Online Event')),
                ('online_link', models.URLField(blank=True, verbose_name='Online Meeting Link')),
                ('address', models.TextField(blank=True, verbose_name='Full Address')),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='event_banners/', verbose_name='Banner Image')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='event_thumbnails/', verbose_name='Thumbnail')),
                ('registration_required', models.BooleanField(default=True, verbose_name='Registration Required')),
                ('registration_type', models.CharField(choices=[('open', 'Open Registration'), ('approval', 'Approval Required'), ('invite_only', 'Invitation Only'), ('paid', 'Paid Registration')], default='open', max_length=20, verbose_name='Registration Type')),
                ('registration_deadline', models.DateTimeField(blank=True, null=True, verbose_name='Registration Deadline')),
                ('max_participants', models.IntegerField(blank=True, null=True, verbose_name='Maximum Participants')),
                ('waitlist_enabled', models.BooleanField(default=False, verbose_name='Waitlist Enabled')),
                ('is_free', models.BooleanField(default=True, verbose_name='Free Event')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Price')),
                ('currency', models.CharField(choices=[('UZS', 'UZS'), ('USD', 'USD')], default='UZS', max_length=3, verbose_name='Currency')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='draft', max_length=20, verbose_name='Status')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured Event')),
                ('show_attendee_list', models.BooleanField(default=True, verbose_name='Show Attendee List')),
                ('allow_comments', models.BooleanField(default=True, verbose_name='Allow Comments')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('tags', models.CharField(blank=True, max_length=500, verbose_name='Tags')),
                ('views_count', models.IntegerField(default=0, verbose_name='Views Count')),
                ('registration_count', models.IntegerField(default=0, verbose_name='Registration Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('co_organizers', models.ManyToManyField(blank=True, related_name='co_organized_events', to=settings.AUTH_USER_MODEL, verbose_name='Co-organizers')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL, verbose_name='Organizer')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.eventcategory', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='EventComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(verbose_name='Comment')),
                ('is_approved', models.BooleanField(default=True, verbose_name='Approved')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='events.event', verbose_name='Event')),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='events.eventcomment', verbose_name='Parent Comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Event Comment',
                'verbose_name_plural': 'Event Comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='event_photos/', verbose_name='Image')),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='Caption')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Uploaded At')),
                ('order', models.IntegerField(default=0, verbose_name='Display Order')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='events.event', verbose_name='Event')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Uploaded By')),
            ],
            options={
                'verbose_name': 'Event Photo',
                'verbose_name_plural': 'Event Photos',
                'ordering': ['order', '-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='EventSpeaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Speaker Name')),
                ('title', models.CharField(max_length=200, verbose_name='Speaker Title')),
                ('organization', models.CharField(blank=True, max_length=200, verbose_name='Organization')),
                ('bio', models.TextField(blank=True, verbose_name='Biography')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='speaker_photos/', verbose_name='Photo')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('linkedin', models.URLField(blank=True, verbose_name='LinkedIn')),
                ('twitter', models.URLField(blank=True, verbose_name='Twitter')),
                ('order', models.IntegerField(default=0, verbose_name='Display Order')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speakers', to='events.event', verbose_name='Event')),
            ],
            options={
                'verbose_name': 'Event Speaker',
                'verbose_name_plural': 'Event Speakers',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EventSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Session Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('session_type', models.CharField(choices=[('keynote', 'Keynote'), ('workshop', 'Workshop'), ('panel', 'Panel Discussion'), ('presentation', 'Presentation'), ('qna', 'Q&A Session'), ('networking', 'Networking'), ('break', 'Break')], max_length=20, verbose_name='Session Type')),
                ('start_time', models.DateTimeField(verbose_name='Start Time')),
                ('end_time', models.DateTimeField(verbose_name='End Time')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Location')),
                ('presentation_url', models.URLField(blank=True, verbose_name='Presentation URL')),
                ('materials_url', models.URLField(blank=True, verbose_name='Materials URL')),
                ('order', models.IntegerField(default=0, verbose_name='Display Order')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='events.event', verbose_name='Event')),
                ('speakers', models.ManyToManyField(blank=True, related_name='sessions', to='events.eventspeaker', verbose_name='Speakers')),
            ],
            options={
                'verbose_name': 'Event Session',
                'verbose_name_plural': 'Event Sessions',
                'ordering': ['start_time', 'order'],
            },
        ),
        migrations.CreateModel(
            name='EventRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('content_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Content Rating')),
                ('organization_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Organization Rating')),
                ('venue_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Venue Rating')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='events.event', verbose_name='Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Event Rating',
                'verbose_name_plural': 'Event Ratings',
                'ordering': ['-created_at'],
                'unique_together': {('event', 'user')},
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True, verbose_name='Registration Date')),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('waiting', 'Waiting List'), ('cancelled', 'Cancelled'), ('attended', 'Attended'), ('no_show', 'No Show')], default='registered', max_length=20, verbose_name='Status')),
                ('dietary_restrictions', models.TextField(blank=True, verbose_name='Dietary Restrictions')),
                ('special_requirements', models.TextField(blank=True, verbose_name='Special Requirements')),
                ('comments', models.TextField(blank=True, verbose_name='Comments')),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('refunded', 'Refunded')], default='pending', max_length=20, verbose_name='Payment Status')),
                ('payment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Payment Amount')),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='event_qr_codes/', verbose_name='QR Code')),
                ('check_in_time', models.DateTimeField(blank=True, null=True, verbose_name='Check-in Time')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='events.event', verbose_name='Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Event Registration',
                'verbose_name_plural': 'Event Registrations',
                'ordering': ['-registration_date'],
                'unique_together': {('event', 'user')},
            },
        ),
    ]
