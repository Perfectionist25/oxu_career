# Generated by Django 5.2.7 on 2025-10-28 12:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Skill Name')),
                ('category', models.CharField(choices=[('technical', 'Technical Skills'), ('soft', 'Soft Skills'), ('language', 'Languages'), ('certification', 'Certifications')], max_length=50, verbose_name='Category')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('alumni', 'Alumni'), ('employer', 'Employer'), ('staff', 'Staff'), ('faculty', 'Faculty'), ('mentor', 'Mentor')], default='student', max_length=20, verbose_name='User Type')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Bio')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/%Y/%m/%d/', verbose_name='Avatar')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='Country')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='Address')),
                ('organization', models.CharField(blank=True, max_length=255, verbose_name='Organization')),
                ('position', models.CharField(blank=True, max_length=255, verbose_name='Position')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('linkedin', models.URLField(blank=True, verbose_name='LinkedIn')),
                ('github', models.URLField(blank=True, verbose_name='GitHub')),
                ('resume', models.FileField(blank=True, null=True, upload_to='resumes/%Y/%m/%d/', verbose_name='Resume')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('job_alerts', models.BooleanField(default=True, verbose_name='Job Alerts')),
                ('newsletter', models.BooleanField(default=False, verbose_name='Newsletter')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Verified')),
                ('verification_token', models.CharField(blank=True, max_length=100, verbose_name='Verification Token')),
                ('profile_views', models.PositiveIntegerField(default=0, verbose_name='Profile Views')),
                ('resume_views', models.PositiveIntegerField(default=0, verbose_name='Resume Views')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Last Activity')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmailVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=100, unique=True, verbose_name='Token')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('expires_at', models.DateTimeField(verbose_name='Expires At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Email Verification',
                'verbose_name_plural': 'Email Verifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('job_alert', 'Job Alert'), ('application_update', 'Application Update'), ('message', 'Message'), ('system', 'System Notification'), ('event', 'Event Notification'), ('security', 'Security Notification')], max_length=50, verbose_name='Notification Type')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('message', models.TextField(verbose_name='Message')),
                ('is_read', models.BooleanField(default=False, verbose_name='Read')),
                ('related_url', models.URLField(blank=True, verbose_name='Related URL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'Login'), ('profile_view', 'Profile View'), ('resume_view', 'Resume View'), ('job_apply', 'Job Application'), ('resource_download', 'Resource Download'), ('event_register', 'Event Registration'), ('profile_update', 'Profile Update'), ('password_change', 'Password Change')], max_length=50, verbose_name='Activity Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Activity',
                'verbose_name_plural': 'User Activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='intermediate', max_length=20, verbose_name='Proficiency Level')),
                ('years_of_experience', models.PositiveIntegerField(default=0, verbose_name='Years of Experience')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Primary Skill')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.skill', verbose_name='Skill')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Skill',
                'verbose_name_plural': 'User Skills',
                'unique_together': {('user', 'skill')},
            },
        ),
    ]
